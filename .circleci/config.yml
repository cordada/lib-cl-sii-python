# CircleCI 2.0 configuration file for this project.
#
# Notes:
#   - Do not use CircleCI's brand of Docker images unless it is for a secondary environment.
#   - We chose not to use dependencies caching because it is complicated to do it right and it is
#     not worth the effort for a project so small.
#
# For more information check out:
#   - https://circleci.com/docs/2.0/language-python/ for more details
#   - https://circleci.com/docs/2.0/configuration-reference/
#
version: "2.1"

# -----BEGIN Environment Variables-----

# Environment variables required for deployment:
#
# - PYPI_PASSWORD := PyPI password or API token.
# - PYPI_USERNAME := PyPI username. For API tokens, use "__token__".
# - TWINE_NON_INTERACTIVE := Do not interactively prompt for credentials if they are missing.
# - TWINE_REPOSITORY_URL := The repository (package index) URL to register the package to.

# x-deploy-environment := Deployment environment variables
x-deploy-environment: &x-deploy-environment
  TWINE_NON_INTERACTIVE: "true"
  TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/

# -----END Environment Variables-----

jobs:
  test:
    parameters:
      python_version:
        type: string

    docker:
      - image: docker.io/library/python:<< parameters.python_version >>

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade setuptools wheel
            pip install -r requirements/test.txt

      - run:
          name: Check Dependencies
          command: |
            . venv/bin/activate
            pip check

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make lint

            # Set Tox environment to the installed Python version.
            TOXENV=$(
              python -c 'import sys; v = sys.version_info; print("py{}{}".format(v.major, v.minor))'
            )

            tox -e "$TOXENV"

            codecov
            make test-coverage-report-console
            make test-coverage-report-html

      - store_artifacts:
          path: test-reports
          destination: test-reports

  dist:
    docker:
      - image: docker.io/library/python:3.8.12

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade setuptools wheel
            pip install -r requirements/release.txt

      - run:
          name: Check Dependencies
          command: |
            . venv/bin/activate
            pip check

      - run:
          name: make dist
          command: |
            . venv/bin/activate
            make dist

      - store_artifacts:
          path: dist
          destination: dist

      - persist_to_workspace:
          root: ~/repo
          paths:
            - dist
            - venv

  deploy:
    docker:
      - image: docker.io/library/python:3.8.12
        environment:
          <<: *x-deploy-environment

    working_directory: ~/repo

    steps:
      - checkout

      - attach_workspace:
          at: ~/repo

      - deploy:
          name: Upload Artifacts to Repository
          command: |
            . venv/bin/activate

            make upload-release \
              TWINE_USERNAME="${PYPI_USERNAME:?}" \
              TWINE_PASSWORD="${PYPI_PASSWORD:?}"

workflows:
  version: 2
  ci:
    jobs:
      - test:
          matrix:
            parameters:
              python_version:
                - "3.7.9"
                - "3.8.12"
                - "3.9.1"
      - dist:
          requires:
            - test
      - deploy:
          requires:
            - dist
          filters:
            branches:
              only:
                - master
